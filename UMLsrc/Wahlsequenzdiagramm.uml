@startuml
autonumber
actor Wähler
participant "Registrierungsservice/\nWahlamt" as RS
participant "Blockchain-Service/\nSmartContract" as BC
participant "Wahlkommision/\nAPI" as VoteAPI
participant "Frontend\nVoting" as FEV
participant "Frontend\nResults" as FER


== Registrierung ==

Wähler -> RS : Authentifiziere (z.B. eID)
RS -> RS : Prüfe Wahlberechtigung
RS -> RS : Generiere Token
RS -> Wähler : Übermittle Token (z.B. QR-Code)
RS -> BC : Schreibe Hash(Token) in Blockchain\n(Typ: REGISTRATION)

== Stimmabgabe ==

Wähler -> FEV : Öffne Wahlclient und gebe Token ein
Wähler -> FEV : Gebe Stimme ab
FEV -> FEV : Verschlüssele Stimme lokal
FEV -> BC : Sende Token + verschlüsselte Stimme

BC -> BC : Prüfe, ob Token-Hash registriert ist
BC -> BC : Prüfe, ob Token schon verwendet wurde
alt Token gültig & nicht verwendet
    BC -> BC : Speichere Stimme
    BC -> BC : Schreibe Hash(Token) in Blockchain\n(Typ: VOTE_CAST)
    BC -> FEV : Bestätige gültige Stimmabgabe/\n(Transaktion)
else Ungültiger oder bereits verwendeter Token
    BC -> FEV : Fehler: Ungültiger oder verbrauchter Token
end

== Auszählung ==

VoteAPI -> BC : Anforderung verschlüsselte Stimmen
BC -> VoteAPI : Senden verschlüsselter Stimmen
VoteAPI -> VoteAPI : Entschlüsselung Stimmen
VoteAPI -> VoteAPI : Auszählung Stimmen
VoteAPI -> BC: Übermittlung Ergebnis
BC -> FER : Senden Ergebnis
Wähler -> FER: Abruf Resultate der Wahl
@enduml
